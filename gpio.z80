;
;Test the user LED and user Key
;
BDOS    equ     05h		;cp/m BDOS entry point
IODIRA	equ	5		;gpio port a input/output selection
GPIOA	equ	3		;gpio port a data in/out
USRKEY	equ	80h		;opcode for User Switch control
DPORT	equ	0		;DATA port i/o 
CPORT	equ	1		;Command port output
;
        org     0100h
;
        ld	(estack),sp	;keep existing info for return to cp/m
        ld      sp,stack
;
        ld      hl,msg		;hello message
	call	_puts
	
;Setup GPIO-a as all output
	ld	a,IODIRA	; GPIO Port A
	out	CPORT,a
	xor	a
	out	DPORT,a		;all zero for output
	
lp:	ld	a,32		;turn on GPA5=0 B0010000=32
	call	gpio
	call	delay		;delay and wait for key(s)
	jr	nz,chk		;non zero means key/switch pressed
	xor	a		;turn off GPA5=0 B00000000=0
	call	gpio
	call	delay		;delay or wait for key/switch
	jr	z,lp		;if zero, no key/switch, go again
;
chk:	cp	'w'		;was a w pressed?
	jr	nz,finish
	ld	hl,info		;yes so print the circuit
	call	_puts
	jr	lp		;keep going
;	
finish:	xor	a		;key or switch was pressed, so done
	call	gpio		;turn all off
	ld	hl,bye		;say bye
	call	_puts		;display msg HL=
	ld	sp,(estack)	;original stack
	ret			;return to cp/m
;
gpio:	push	af		;save led value 0 or 1
	ld	a,GPIOA
	out	(CPORT),a	;optcode sent
	pop	af
	out	(DPORT),a	;data sent
	ret
;	
;Delay loop that check key pressed on terminal or user key 
delay:	ld	bc,00e00h	;aprox 1/2s 8mhz CPU, pure guess work
loop2:	dec	bc		;count the loop
	push	bc		;save regs when calling BDOS
	push	de
	ld	c,6		;BDOS raw i/o check if key pressed
	ld	e,0ffh
	call	BDOS
	pop	de		;get our values back from stack
	pop	bc
	or	a		;check if key pressed on terminal
	ret	nz		;yes return (also keeps nz flag set)
	ld	a,USRKEY	;Now check user key
	out	(CPORT),a	;command port
	in	a,(DPORT)	;read key
	and	a,1		;only interested in bit 0
	ret	nz		;return if userkey pressed
	ld	a,b		;or is bc=0
	or	c
	jr	nz,loop2	;not finished counting, go again
	xor	a		;set the z flag to 0
	ret			;return no key pressed, end of delay
	
;	
_puts:	push	bc		;save our regs ready for bdos calls
	push	de
nxt:	ld	a,(hl)		;get char
	or	a		;test if it's 0, end of msg
	jr	z,done		;yes so done
	ld      e,a		; set up call to BDOS to print a char
        ld      c,2
        push    hl		;save text pointer
        call    BDOS		;print it
        pop     hl
        inc     hl		;next char
        jr      nxt		;keep going
done:	pop	de		;finished restore regs
	pop	bc
	ret			;and return
;
info	db	'Demo HW wiring (see A040618 schematic):'
        db      0ah,0dh
        db	' GPIO'
        db	0ah,0dh
	db	' (J7)'
	db	0ah,0dh
	db	'+-----+'
	db	0ah,0dh
	db	'| 1 2 |'
	db	0ah,0dh
	db	'| 3 4 |   LED         RESISTOR'
	db	0ah,0dh
	db	'| 5 6 |                 680'
	db	0ah,0dh
	db	'| 7 8-+--->|-----------/\/\/--+'
	db	0ah,0dh
	db	'| 9 10|                       |'
	db	0ah,0dh
	db	'|11 12|                       |'
	db	0ah,0dh
	db	'|13 14|                       |'
	db	0ah,0dh
	db	'|15 16|                       |'
	db	0ah,0dh
	db	'|17 18|                       |'
	db	0ah,0dh
	db	'|19 20+-----------------------+ GND'
	db	0ah,0dh
	db	'+-----+'
	db	0ah,0dh
msg	db      'User GPIO LED test, any key to exit or w for diagram.'
	db	0ah,0dh,0
bye	db	'Exit'
	db	0ah,0dh,0
estack	dw	0
	ds	128
stack: 	ds	$
;
	end

